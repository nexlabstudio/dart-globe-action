name: "Deploy with Dart Globe"
description: "A reusable GitHub Action to deploy Dart and Flutter applications using Dart Globe CLI"
author: "Mastersam07"
branding:
  icon: "upload-cloud"
  color: "blue"

inputs:
  environment:
    description: "Deployment environment: 'preview' or 'production'"
    default: "preview"
    required: false
  working-directory:
    description: The working directory in which to run the deployment from
    required: false
    default: .
  globe-token:
    description: "Authentication token for Globe CLI"
    required: true
  project-id:
    description: "Set the Project ID/Slug used by Globe"
    required: true
  org-id:
    description: "Set the Organization ID/Slug used by Globe"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Dart SDK
      uses: dart-lang/setup-dart@v1
      with:
        sdk: stable

    - name: Install Dart Globe CLI
      shell: bash
      run: dart pub global activate globe_cli
    
    - name: Authenticate to Globe
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: globe login --token ${{ inputs.globe-token }}

    - name: Deploy to Preview
      shell: bash
      if: ${{ inputs.environment == 'preview' }}
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Capture output and check for failure
        output=$(globe deploy --project=${{ inputs.project-id}} --org=${{ inputs.org-id}} --logs 2>&1)
        echo "$output"
        
        # Check if deployment failed and exit appropriately
        if echo "$output" | grep -q "Deployment failed"; then
          echo "❌ Deployment failed - exiting with error code"
          exit 1
        fi
        
        echo "✅ Deployment completed successfully"

    - name: Deploy to Production
      shell: bash
      if: ${{ inputs.environment == 'production' }}
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Capture output and check for failure
        output=$(globe deploy --prod --project=${{ inputs.project-id}} --org=${{ inputs.org-id}} --logs 2>&1)
        echo "$output"
        
        # Check if deployment failed and exit appropriately
        if echo "$output" | grep -q "Deployment failed"; then
          echo "❌ Deployment failed - exiting with error code"
          exit 1
        fi
        
        echo "✅ Deployment completed successfully"
